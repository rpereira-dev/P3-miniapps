name: CMake

on:
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CUDA_ARCHITECTURES: 80
  HIP_ARCHITECTURES: gfx908

jobs:
  build_nvidia_env:
    runs-on: ubuntu-latest
    env: 
      programming_models: KOKKOS THRUST CUDA
      backends: OPENMP CUDA
      compiler: g++
      nvcc_wrapper: /work/ext_lib/kokkos/bin/nvcc_wrapper
      container: nvidia_env

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        
    - name: Update submodules
      run: git submodule update --remote --recursive

    - name: Configure CMake for OPENMP backend
      run: |
        for programming_model in ${{ env.programming_models }}; do
          if [ ${programming_model} != "CUDA" ]; then
            docker-compose run ${{ env.container }} cmake -B build_${programming_model}_OPENMP -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{ env.compiler }} -DCMAKE_CUDA_ARCHITECTURES=${{env.CUDA_ARCHITECTURES}} \
              -DBUILD_TESTING=ON -DPROGRAMMING_MODEL=${programming_model} -DBACKEND=OPENMP
          fi
        done

    - name: Configure CMake for CUDA backend
      run: |
        for programming_model in ${{ env.programming_models }}; do
          if [ ${programming_model} = "KOKKOS" ]; then
            docker-compose run ${{ env.container }} cmake -B build_${programming_model}_CUDA -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{ env.nvcc_wrapper }} -DCMAKE_CUDA_ARCHITECTURES=${{env.CUDA_ARCHITECTURES}} \
              -DBUILD_TESTING=ON -DPROGRAMMING_MODEL=${programming_model} -DBACKEND=CUDA \
              -DKokkos_ENABLE_OPENMP=On -DKokkos_ENABLE_CUDA=On -DKokkos_ENABLE_CUDA_LAMBDA=On -DKokkos_ARCH_AMPERE80=On -DKokkos_ARCH_SKX=On -DKokkos_ENABLE_AGGRESSIVE_VECTORIZATION=On
          else
            docker-compose run ${{ env.container }} cmake -B build_${programming_model}_CUDA -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{ env.compiler }} -DCMAKE_CUDA_ARCHITECTURES=${{env.CUDA_ARCHITECTURES}} \
              -DBUILD_TESTING=ON -DPROGRAMMING_MODEL=${programming_model} -DBACKEND=CUDA
          fi
        done

    - name: Build
      # Build your program with the given configuration
      run: |
        for programming_model in ${{ env.programming_models }}; do
          for backend in ${{ env.backends }}; do
            if [ ${programming_model} != "CUDA" ] || [ ${backend} != "OPENMP" ]; then
              docker-compose run ${{ env.container }} cmake --build build_${programming_model}_${backend} --config ${{env.BUILD_TYPE}}
            fi
          done
        done

    - name: Test
      # Execute tests defined by the CMake configuration. Testing on CPU only
      run: docker-compose run ${{ env.container }} ctest --test-dir build_THRUST_OPENMP -C ${{env.BUILD_TYPE}}

  build_nvidia_hpc_sdk_env:
    runs-on: ubuntu-latest
    env: 
      programming_models: OPENMP OPENACC STDPAR
      backends: OPENMP CUDA
      compiler: nvc++
      container: nvidia_hpc_sdk_env
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        
    - name: Update submodules
      run: git submodule update --remote --recursive
  
    - name: Configure CMake
      run: | 
        for programming_model in ${{ env.programming_models }}; do
          for backend in ${{ env.backends }}; do
            docker-compose run ${{ env.container }} cmake -B build_${programming_model}_${backend} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{ env.compiler }} \
              -DBUILD_TESTING=ON -DPROGRAMMING_MODEL=${programming_model} -DBACKEND=${backend}
          done
        done
  
    - name: Build
      # Build your program with the given configuration
      run: |
        for programming_model in ${{ env.programming_models }}; do
          for backend in ${{ env.backends }}; do
            docker-compose run ${{ env.container }} cmake --build build_${programming_model}_${backend} --config ${{env.BUILD_TYPE}}
          done
        done
  
    - name: Test
      # Execute tests defined by the CMake configuration. Testing on CPU only
      run: |
        for programming_model in ${{ env.programming_models }}; do
          docker-compose run ${{ env.container }} ctest --test-dir build_${programming_model}_OPENMP -C ${{env.BUILD_TYPE}}
        done

          ###build_amd:
          ###  # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
          ###  # You can convert this to a matrix build if you need cross-platform coverage.
          ###  # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
          ###  runs-on: ubuntu-latest
          ###  
          ###  strategy:
          ###    matrix:
          ###      programming-model: ['OPENMP', 'HIP', 'THRUST']

          ###  steps:
          ###  - uses: actions/checkout@v3
          ###    with:
          ###      submodules: recursive
          ###      
          ###  - name: Update submodules
          ###    run: git submodule update --remote --recursive

          ###  - name: Configure CMake
          ###    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
          ###    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
          ###    run: > 
          ###      docker-compose run amd_env cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=hipcc -DCMAKE_HIP_ARCHITECTURES=${{env.HIP_ARCHITECTURES}}
          ###      -DBUILD_TESTING=OFF -DPROGRAMMING_MODEL=${{ matrix.programming-model }} -DBACKEND=HIP

          ###  - name: Build
          ###    # Build your program with the given configuration
          ###    run: docker-compose run amd_env cmake --build build --config ${{env.BUILD_TYPE}}
